<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="C:\Users\CHIJIA~1\AppData\Local\Temp\gumtree4338690838332822039" pos:tabs="1"><cpp:include pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">include<pos:position pos:line="1" pos:column="9"/></cpp:directive> <cpp:file pos:line="1" pos:column="10">&lt;sstream&gt;<pos:position pos:line="1" pos:column="22"/></cpp:file></cpp:include>
<comment type="line" pos:line="2" pos:column="1">// #include "ros/ros.h"</comment>
<cpp:include pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">include<pos:position pos:line="3" pos:column="9"/></cpp:directive> <cpp:file pos:line="3" pos:column="10">"rclcpp/rclcpp.hpp"<pos:position pos:line="3" pos:column="29"/></cpp:file></cpp:include>
<comment type="line" pos:line="4" pos:column="1">// #include "std_msgs/String.h"</comment>
<cpp:include pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">include<pos:position pos:line="5" pos:column="9"/></cpp:directive> <cpp:file pos:line="5" pos:column="10">"std_msgs/msg/string.hpp"<pos:position pos:line="5" pos:column="35"/></cpp:file></cpp:include>
<function><type><name pos:line="6" pos:column="1">int<pos:position pos:line="6" pos:column="4"/></name></type> <name pos:line="6" pos:column="5">main<pos:position pos:line="6" pos:column="9"/></name><parameter_list pos:line="6" pos:column="9">(<parameter><decl><type><name pos:line="6" pos:column="10">int<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">argc<pos:position pos:line="6" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="6" pos:column="20">char<pos:position pos:line="6" pos:column="24"/></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier><modifier pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></modifier></type><name pos:line="6" pos:column="27">argv<pos:position pos:line="6" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="32"/></parameter_list>
<block pos:line="7" pos:column="1">{
<comment type="line" pos:line="8" pos:column="1">//  ros::init(argc, argv, "talker");</comment>
<comment type="line" pos:line="9" pos:column="1">//  ros::NodeHandle n;</comment>
  <expr_stmt><expr><call><name><name pos:line="10" pos:column="3">rclcpp<pos:position pos:line="10" pos:column="9"/></name><operator pos:line="10" pos:column="9">::<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="11">init<pos:position pos:line="10" pos:column="15"/></name></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">argc<pos:position pos:line="10" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="22">argv<pos:position pos:line="10" pos:column="26"/></name></expr></argument>)<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name><name pos:line="11" pos:column="3">rclcpp<pos:position pos:line="11" pos:column="9"/></name><operator pos:line="11" pos:column="9">::<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">init<pos:position pos:line="11" pos:column="15"/></name></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">argc<pos:position pos:line="11" pos:column="20"/></name></expr></argument>)<pos:position pos:line="11" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">auto<pos:position pos:line="12" pos:column="7"/></name></type> <name pos:line="12" pos:column="8">node<pos:position pos:line="12" pos:column="12"/></name> <init pos:line="12" pos:column="13">= <expr><call><name><name pos:line="12" pos:column="15">rclcpp<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">::<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">Node<pos:position pos:line="12" pos:column="27"/></name><operator pos:line="12" pos:column="27">::<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="29">make_shared<pos:position pos:line="12" pos:column="40"/></name></name><argument_list pos:line="12" pos:column="40">(<argument><expr><literal type="string" pos:line="12" pos:column="41">"talker"<pos:position pos:line="12" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="51"/></decl_stmt>
<comment type="line" pos:line="13" pos:column="1">//  ros::Publisher chatter_pub = n.advertise&lt;std_msgs::String&gt;("chatter", 1000);</comment>
<comment type="line" pos:line="14" pos:column="1">//  ros::Rate loop_rate(10);</comment>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">auto<pos:position pos:line="15" pos:column="7"/></name></type> <name pos:line="15" pos:column="8">chatter_pub<pos:position pos:line="15" pos:column="19"/></name> <init pos:line="15" pos:column="20">= <expr><call><name><name pos:line="15" pos:column="22">node<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">-&gt;<pos:position pos:line="15" pos:column="31"/></operator><name><name pos:line="15" pos:column="28">create_publisher<pos:position pos:line="15" pos:column="44"/></name><argument_list type="generic" pos:line="15" pos:column="44">&lt;<argument><expr><name><name pos:line="15" pos:column="45">std_msgs<pos:position pos:line="15" pos:column="53"/></name><operator pos:line="15" pos:column="53">::<pos:position pos:line="15" pos:column="55"/></operator><name pos:line="15" pos:column="55">msg<pos:position pos:line="15" pos:column="58"/></name><operator pos:line="15" pos:column="58">::<pos:position pos:line="15" pos:column="60"/></operator><name pos:line="15" pos:column="60">String<pos:position pos:line="15" pos:column="66"/></name></name></expr></argument>&gt;<pos:position pos:line="15" pos:column="70"/></argument_list></name></name><argument_list pos:line="15" pos:column="67">(<argument><expr><literal type="string" pos:line="15" pos:column="68">"chatter"<pos:position pos:line="15" pos:column="77"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="79">rmw_qos_profile_default<pos:position pos:line="15" pos:column="102"/></name></expr></argument>)<pos:position pos:line="15" pos:column="103"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="104"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="16" pos:column="3">rclcpp<pos:position pos:line="16" pos:column="9"/></name><operator pos:line="16" pos:column="9">::<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">Rate<pos:position pos:line="16" pos:column="15"/></name></name></type> <name pos:line="16" pos:column="16">loop_rate<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><literal type="number" pos:line="16" pos:column="26">10<pos:position pos:line="16" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></decl>;<pos:position pos:line="16" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">int<pos:position pos:line="17" pos:column="6"/></name></type> <name pos:line="17" pos:column="7">count<pos:position pos:line="17" pos:column="12"/></name> <init pos:line="17" pos:column="13">= <expr><literal type="number" pos:line="17" pos:column="15">0<pos:position pos:line="17" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="17"/></decl_stmt>
<comment type="line" pos:line="18" pos:column="1">//  std_msgs::String msg;</comment>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">auto<pos:position pos:line="19" pos:column="7"/></name></type> <name pos:line="19" pos:column="8">msg<pos:position pos:line="19" pos:column="11"/></name> <init pos:line="19" pos:column="12">= <expr><call><name><name pos:line="19" pos:column="14">std<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">::<pos:position pos:line="19" pos:column="19"/></operator><name><name pos:line="19" pos:column="19">make_shared<pos:position pos:line="19" pos:column="30"/></name><argument_list type="generic" pos:line="19" pos:column="30">&lt;<argument><expr><name><name pos:line="19" pos:column="31">std_msgs<pos:position pos:line="19" pos:column="39"/></name><operator pos:line="19" pos:column="39">::<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="41">msg<pos:position pos:line="19" pos:column="44"/></name><operator pos:line="19" pos:column="44">::<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="46">String<pos:position pos:line="19" pos:column="52"/></name></name></expr></argument>&gt;<pos:position pos:line="19" pos:column="56"/></argument_list></name></name><argument_list pos:line="19" pos:column="53">()<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="56"/></decl_stmt>
<comment type="line" pos:line="20" pos:column="1">//  while (ros::ok())</comment>
  <while pos:line="21" pos:column="3">while <condition pos:line="21" pos:column="9">(<expr><call><name><name pos:line="21" pos:column="10">rclcpp<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">::<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="18">ok<pos:position pos:line="21" pos:column="20"/></name></name><argument_list pos:line="21" pos:column="20">()<pos:position pos:line="21" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="23"/></condition>
  <block pos:line="22" pos:column="3">{
    <decl_stmt><decl><type><name><name pos:line="23" pos:column="5">std<pos:position pos:line="23" pos:column="8"/></name><operator pos:line="23" pos:column="8">::<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">stringstream<pos:position pos:line="23" pos:column="22"/></name></name></type> <name pos:line="23" pos:column="23">ss<pos:position pos:line="23" pos:column="25"/></name></decl>;<pos:position pos:line="23" pos:column="26"/></decl_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">ss<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">&lt;&lt;<pos:position pos:line="24" pos:column="16"/></operator> <literal type="string" pos:line="24" pos:column="11">"hello world "<pos:position pos:line="24" pos:column="25"/></literal> <operator pos:line="24" pos:column="26">&lt;&lt;<pos:position pos:line="24" pos:column="34"/></operator> <name pos:line="24" pos:column="29">count<pos:position pos:line="24" pos:column="34"/></name><operator pos:line="24" pos:column="34">++<pos:position pos:line="24" pos:column="36"/></operator></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
<comment type="line" pos:line="25" pos:column="1">//    msg.data = ss.str();</comment>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">msg<pos:position pos:line="26" pos:column="8"/></name><operator pos:line="26" pos:column="8">-&gt;<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="10">data<pos:position pos:line="26" pos:column="14"/></name></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <call><name><name pos:line="26" pos:column="17">ss<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">.<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">str<pos:position pos:line="26" pos:column="23"/></name></name><argument_list pos:line="26" pos:column="23">()<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
<comment type="line" pos:line="27" pos:column="1">//    ROS_INFO("%s", msg.data.c_str());</comment>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">RCLCPP_INFO<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><call><name><name pos:line="28" pos:column="17">node<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">-&gt;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="23">get_logger<pos:position pos:line="28" pos:column="33"/></name></name><argument_list pos:line="28" pos:column="33">()<pos:position pos:line="28" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="37">"%s\n"<pos:position pos:line="28" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="28" pos:column="45">msg<pos:position pos:line="28" pos:column="48"/></name><operator pos:line="28" pos:column="48">-&gt;<pos:position pos:line="28" pos:column="53"/></operator><name pos:line="28" pos:column="50">data<pos:position pos:line="28" pos:column="54"/></name><operator pos:line="28" pos:column="54">.<pos:position pos:line="28" pos:column="55"/></operator><name pos:line="28" pos:column="55">c_str<pos:position pos:line="28" pos:column="60"/></name></name><argument_list pos:line="28" pos:column="60">()<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="64"/></expr_stmt>
<comment type="line" pos:line="29" pos:column="1">//    chatter_pub.publish(msg);</comment>
    <expr_stmt><expr><call><name><name pos:line="30" pos:column="5">chatter_pub<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">-&gt;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="18">publish<pos:position pos:line="30" pos:column="25"/></name></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name pos:line="30" pos:column="26">msg<pos:position pos:line="30" pos:column="29"/></name></expr></argument>)<pos:position pos:line="30" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>
<comment type="line" pos:line="31" pos:column="1">//    ros::spinOnce();</comment>
    <expr_stmt><expr><call><name><name pos:line="32" pos:column="5">rclcpp<pos:position pos:line="32" pos:column="11"/></name><operator pos:line="32" pos:column="11">::<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">spin_some<pos:position pos:line="32" pos:column="22"/></name></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">node<pos:position pos:line="32" pos:column="27"/></name></expr></argument>)<pos:position pos:line="32" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="33" pos:column="5">loop_rate<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">.<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="15">sleep<pos:position pos:line="33" pos:column="20"/></name></name><argument_list pos:line="33" pos:column="20">()<pos:position pos:line="33" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></while>
  <return pos:line="35" pos:column="3">return <expr><literal type="number" pos:line="35" pos:column="10">0<pos:position pos:line="35" pos:column="11"/></literal></expr>;<pos:position pos:line="35" pos:column="12"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function>
</unit>

